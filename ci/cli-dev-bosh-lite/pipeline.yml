resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
- name: bosh-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource
- name: cron-resource
  type: docker-image
  source:
    repository: cftoolsmiths/cron-test

resources:
  - name: terraform
    type: terraform
    source:
      storage:
        bucket: ((bosh_lite_storage_bucket))
        bucket_path: bosh-lite/
        access_key_id: ((bosh_lite_storage_access_key))
        secret_access_key: ((bosh_lite_storage_secret_key))
        endpoint: storage.googleapis.com
  - name: capi-ci
    type: git
    source:
      branch: master
      uri: https://github.com/cloudfoundry/capi-ci.git
  - name: bosh-deployment
    type: git
    source:
      branch: master
      uri: https://github.com/cloudfoundry/bosh-deployment.git
  - name: ready-pool
    type: pool
    source:
      branch: master
      uri: ((env_pool_repo))
      pool: bosh-lites
      private_key: ((bosh_lite_pool_deploy_key))
  - name: broken-pool
    type: pool
    source:
      branch: master
      uri: ((env_pool_repo))
      pool: broken-bosh-lites
      private_key: ((bosh_lite_pool_deploy_key))
  - name: building-pool
    type: pool
    source:
      branch: master
      uri: ((env_pool_repo))
      pool: building-bosh-lites
      private_key: ((bosh_lite_pool_deploy_key))
  - name: pool-repo
    type: git
    source:
      branch: master
      uri: ((env_pool_repo))
      private_key: ((bosh_lite_pool_deploy_key))
  - name: create-bosh-lite-trigger
    type: git
    source:
      branch: master
      uri: ((env_pool_repo))
      private_key: ((bosh_lite_pool_deploy_key))
      paths:
        - .trigger-bosh-lites-create # updated by check-pool-size
  - name: destroy-bosh-lite-trigger
    type: git
    source:
      branch: master
      uri: ((env_pool_repo))
      private_key: ((bosh_lite_pool_deploy_key))
      paths:
        - .trigger-bosh-lites-destroy # updated by unclaim_bosh_lite alias
  - name: cf-deployment
    type: git
    source:
      branch: release-candidate
      uri: https://github.com/cloudfoundry/cf-deployment.git
  - name: cf-deploy
    type: bosh-deployment
    source:
      skip_check: true
  - name: 5m
    type: time
    source:
      interval: 5m

jobs:
  - name: create-bosh-lite
    plan:
      - aggregate:
        - get: capi-ci
        - get: bosh-deployment
        - get: cf-deployment
        - get: create-bosh-lite-trigger
          trigger: true
      - task: generate-fake-env-for-building-pool
        file: capi-ci/ci/bosh-lite/generate-fake-env-for-building-pool.yml
      - put: building-pool
        params:
          add_claimed: fake-placeholder-env/
      - put: terraform
        params:
          generate_random_name: true
          delete_on_failure: true
          terraform_source: capi-ci/terraform/bosh-lite/
          vars: &terraform-vars
            project_id: ((bosh_lite_project_id))
            json_key: ((bosh_lite_gcp_json_key))
            dns_project_id: ((dns_gcp_project_id))
            dns_json_key: ((dns_gcp_json_key))
            system_domain_suffix: ((bosh_lite_system_domain_suffix))
            dns_zone_name: ((bosh_lite_dns_zone_name))
            region: ((bosh_lite_region))
            zone: ((bosh_lite_zone))
      - do:
          - task: create-bosh-lite
            file: capi-ci/ci/bosh-lite/create-bosh-lite.yml
            params:
              GCP_JSON_KEY: ((bosh_lite_gcp_json_key))
              GCP_INSTANCE_TYPE: n1-standard-4
          - do:
              - task: create-env-vars-file
                file: capi-ci/ci/bosh-lite/create-env-vars-file.yml
              - task: upload-cf-assets
                file: capi-ci/ci/bosh-lite/upload-cf-assets.yml
              - task: write-bosh-target-file
                file: capi-ci/ci/bosh-lite/write-bosh-target-file.yml
              - put: cf-deploy
                params:
                  source_file: bosh-target/target.yml
                  manifest: cf-deployment/cf-deployment.yml
                  vars_files:
                  - bosh-target/vars.yml
                  ops_files:
                  - capi-ci/cf-deployment-operations/skip-cert-verify.yml
                  - capi-ci/cf-deployment-operations/use-latest-stemcell.yml
                  - cf-deployment/operations/bosh-lite.yml
                  - cf-deployment/operations/use-compiled-releases.yml
                  - capi-ci/cf-deployment-operations/seed-credhub-asg.yml
              - task: upload-to-gcs
                file: capi-ci/ci/gcs/upload-to-gcs.yml
                input_mapping:
                  environment: terraform
                  source-directory: director-state
                params:
                  GCP_JSON_KEY: ((bosh_lite_gcp_json_key))
                  GCP_BUCKET: ((bosh_lite_storage_bucket))
                  GCP_PATH: director-state
                  USE_ENV_NAMED_SUBDIR: true
              - put: ready-pool
                params:
                  add: bosh-lite-env-info/
              - put: building-pool
                params:
                  remove: fake-placeholder-env/
            on_failure:
              task: delete-bosh-lite
              file: capi-ci/ci/bosh-lite/delete-bosh-lite.yml
        on_failure:
          aggregate:
            - put: terraform
              params:
                action: destroy
                env_name_file: terraform/name
                terraform_source: capi-ci/terraform/bosh-lite/
                vars: *terraform-vars
              get_params:
                action: destroy

  - name: delete-bosh-lite
    plan:
      - aggregate:
        - get: destroy-bosh-lite-trigger
          version: every
          trigger: true
        - get: capi-ci
        - get: bosh-deployment
        - put: broken-pool
          params:
            acquire: true
      - do:
        - task: download-from-gcs
          file: capi-ci/ci/gcs/download-from-gcs.yml
          input_mapping:
            environment: broken-pool
          output_mapping:
            destination-directory: director-state
          params:
            GCP_JSON_KEY: ((bosh_lite_gcp_json_key))
            GCP_BUCKET: ((bosh_lite_storage_bucket))
            GCP_PATH: director-state
            USE_ENV_NAMED_SUBDIR: true
        - task: delete-bosh-lite
          file: capi-ci/ci/bosh-lite/delete-bosh-lite.yml
        - put: terraform
          params:
            action: destroy
            env_name_file: broken-pool/name
            terraform_source: capi-ci/terraform/bosh-lite/
            vars: *terraform-vars
          get_params:
            action: destroy
        - task: delete-from-gcs
          file: capi-ci/ci/gcs/delete-from-gcs.yml
          input_mapping:
            environment: broken-pool
          params:
            GCP_JSON_KEY: ((bosh_lite_gcp_json_key))
            GCP_BUCKET: ((bosh_lite_storage_bucket))
            GCP_PATH: director-state
            USE_ENV_NAMED_SUBDIR: true
        - put: broken-pool
          params:
            remove: broken-pool/

  - name: check-pool-size
    build_logs_to_retain: 100
    plan:
      - aggregate:
        - get: capi-ci
        - get: pool-repo
        - get: 5m
          trigger: true
      - task: check-pool-size
        file: capi-ci/ci/bosh-lite/check-pool-size.yml
        input_mapping:
          env-pool: pool-repo
        params:
          MIN_UNCLAIMED_COUNT: 3
          GIT_USERNAME: ((git_username))
          GIT_EMAIL: ((git_email))
      - put: pool-repo
        params:
          repository: updated-env-pool
          rebase: true
