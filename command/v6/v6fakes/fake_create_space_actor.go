// Code generated by counterfeiter. DO NOT EDIT.
package v6fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v2action"
	"code.cloudfoundry.org/cli/command/v6"
)

type FakeCreateSpaceActor struct {
	CreateSpaceStub        func(spaceName, orgName, quotaName string) (v2action.Space, v2action.Warnings, error)
	createSpaceMutex       sync.RWMutex
	createSpaceArgsForCall []struct {
		spaceName string
		orgName   string
		quotaName string
	}
	createSpaceReturns struct {
		result1 v2action.Space
		result2 v2action.Warnings
		result3 error
	}
	createSpaceReturnsOnCall map[int]struct {
		result1 v2action.Space
		result2 v2action.Warnings
		result3 error
	}
	GrantSpaceManagerByUsernameStub        func(orgGUID string, spaceGUID string, username string) (v2action.Warnings, error)
	grantSpaceManagerByUsernameMutex       sync.RWMutex
	grantSpaceManagerByUsernameArgsForCall []struct {
		orgGUID   string
		spaceGUID string
		username  string
	}
	grantSpaceManagerByUsernameReturns struct {
		result1 v2action.Warnings
		result2 error
	}
	grantSpaceManagerByUsernameReturnsOnCall map[int]struct {
		result1 v2action.Warnings
		result2 error
	}
	GrantSpaceDeveloperByUsernameStub        func(spaceGUID string, username string) (v2action.Warnings, error)
	grantSpaceDeveloperByUsernameMutex       sync.RWMutex
	grantSpaceDeveloperByUsernameArgsForCall []struct {
		spaceGUID string
		username  string
	}
	grantSpaceDeveloperByUsernameReturns struct {
		result1 v2action.Warnings
		result2 error
	}
	grantSpaceDeveloperByUsernameReturnsOnCall map[int]struct {
		result1 v2action.Warnings
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCreateSpaceActor) CreateSpace(spaceName string, orgName string, quotaName string) (v2action.Space, v2action.Warnings, error) {
	fake.createSpaceMutex.Lock()
	ret, specificReturn := fake.createSpaceReturnsOnCall[len(fake.createSpaceArgsForCall)]
	fake.createSpaceArgsForCall = append(fake.createSpaceArgsForCall, struct {
		spaceName string
		orgName   string
		quotaName string
	}{spaceName, orgName, quotaName})
	fake.recordInvocation("CreateSpace", []interface{}{spaceName, orgName, quotaName})
	fake.createSpaceMutex.Unlock()
	if fake.CreateSpaceStub != nil {
		return fake.CreateSpaceStub(spaceName, orgName, quotaName)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.createSpaceReturns.result1, fake.createSpaceReturns.result2, fake.createSpaceReturns.result3
}

func (fake *FakeCreateSpaceActor) CreateSpaceCallCount() int {
	fake.createSpaceMutex.RLock()
	defer fake.createSpaceMutex.RUnlock()
	return len(fake.createSpaceArgsForCall)
}

func (fake *FakeCreateSpaceActor) CreateSpaceArgsForCall(i int) (string, string, string) {
	fake.createSpaceMutex.RLock()
	defer fake.createSpaceMutex.RUnlock()
	return fake.createSpaceArgsForCall[i].spaceName, fake.createSpaceArgsForCall[i].orgName, fake.createSpaceArgsForCall[i].quotaName
}

func (fake *FakeCreateSpaceActor) CreateSpaceReturns(result1 v2action.Space, result2 v2action.Warnings, result3 error) {
	fake.CreateSpaceStub = nil
	fake.createSpaceReturns = struct {
		result1 v2action.Space
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCreateSpaceActor) CreateSpaceReturnsOnCall(i int, result1 v2action.Space, result2 v2action.Warnings, result3 error) {
	fake.CreateSpaceStub = nil
	if fake.createSpaceReturnsOnCall == nil {
		fake.createSpaceReturnsOnCall = make(map[int]struct {
			result1 v2action.Space
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.createSpaceReturnsOnCall[i] = struct {
		result1 v2action.Space
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCreateSpaceActor) GrantSpaceManagerByUsername(orgGUID string, spaceGUID string, username string) (v2action.Warnings, error) {
	fake.grantSpaceManagerByUsernameMutex.Lock()
	ret, specificReturn := fake.grantSpaceManagerByUsernameReturnsOnCall[len(fake.grantSpaceManagerByUsernameArgsForCall)]
	fake.grantSpaceManagerByUsernameArgsForCall = append(fake.grantSpaceManagerByUsernameArgsForCall, struct {
		orgGUID   string
		spaceGUID string
		username  string
	}{orgGUID, spaceGUID, username})
	fake.recordInvocation("GrantSpaceManagerByUsername", []interface{}{orgGUID, spaceGUID, username})
	fake.grantSpaceManagerByUsernameMutex.Unlock()
	if fake.GrantSpaceManagerByUsernameStub != nil {
		return fake.GrantSpaceManagerByUsernameStub(orgGUID, spaceGUID, username)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.grantSpaceManagerByUsernameReturns.result1, fake.grantSpaceManagerByUsernameReturns.result2
}

func (fake *FakeCreateSpaceActor) GrantSpaceManagerByUsernameCallCount() int {
	fake.grantSpaceManagerByUsernameMutex.RLock()
	defer fake.grantSpaceManagerByUsernameMutex.RUnlock()
	return len(fake.grantSpaceManagerByUsernameArgsForCall)
}

func (fake *FakeCreateSpaceActor) GrantSpaceManagerByUsernameArgsForCall(i int) (string, string, string) {
	fake.grantSpaceManagerByUsernameMutex.RLock()
	defer fake.grantSpaceManagerByUsernameMutex.RUnlock()
	return fake.grantSpaceManagerByUsernameArgsForCall[i].orgGUID, fake.grantSpaceManagerByUsernameArgsForCall[i].spaceGUID, fake.grantSpaceManagerByUsernameArgsForCall[i].username
}

func (fake *FakeCreateSpaceActor) GrantSpaceManagerByUsernameReturns(result1 v2action.Warnings, result2 error) {
	fake.GrantSpaceManagerByUsernameStub = nil
	fake.grantSpaceManagerByUsernameReturns = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeCreateSpaceActor) GrantSpaceManagerByUsernameReturnsOnCall(i int, result1 v2action.Warnings, result2 error) {
	fake.GrantSpaceManagerByUsernameStub = nil
	if fake.grantSpaceManagerByUsernameReturnsOnCall == nil {
		fake.grantSpaceManagerByUsernameReturnsOnCall = make(map[int]struct {
			result1 v2action.Warnings
			result2 error
		})
	}
	fake.grantSpaceManagerByUsernameReturnsOnCall[i] = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeCreateSpaceActor) GrantSpaceDeveloperByUsername(spaceGUID string, username string) (v2action.Warnings, error) {
	fake.grantSpaceDeveloperByUsernameMutex.Lock()
	ret, specificReturn := fake.grantSpaceDeveloperByUsernameReturnsOnCall[len(fake.grantSpaceDeveloperByUsernameArgsForCall)]
	fake.grantSpaceDeveloperByUsernameArgsForCall = append(fake.grantSpaceDeveloperByUsernameArgsForCall, struct {
		spaceGUID string
		username  string
	}{spaceGUID, username})
	fake.recordInvocation("GrantSpaceDeveloperByUsername", []interface{}{spaceGUID, username})
	fake.grantSpaceDeveloperByUsernameMutex.Unlock()
	if fake.GrantSpaceDeveloperByUsernameStub != nil {
		return fake.GrantSpaceDeveloperByUsernameStub(spaceGUID, username)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.grantSpaceDeveloperByUsernameReturns.result1, fake.grantSpaceDeveloperByUsernameReturns.result2
}

func (fake *FakeCreateSpaceActor) GrantSpaceDeveloperByUsernameCallCount() int {
	fake.grantSpaceDeveloperByUsernameMutex.RLock()
	defer fake.grantSpaceDeveloperByUsernameMutex.RUnlock()
	return len(fake.grantSpaceDeveloperByUsernameArgsForCall)
}

func (fake *FakeCreateSpaceActor) GrantSpaceDeveloperByUsernameArgsForCall(i int) (string, string) {
	fake.grantSpaceDeveloperByUsernameMutex.RLock()
	defer fake.grantSpaceDeveloperByUsernameMutex.RUnlock()
	return fake.grantSpaceDeveloperByUsernameArgsForCall[i].spaceGUID, fake.grantSpaceDeveloperByUsernameArgsForCall[i].username
}

func (fake *FakeCreateSpaceActor) GrantSpaceDeveloperByUsernameReturns(result1 v2action.Warnings, result2 error) {
	fake.GrantSpaceDeveloperByUsernameStub = nil
	fake.grantSpaceDeveloperByUsernameReturns = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeCreateSpaceActor) GrantSpaceDeveloperByUsernameReturnsOnCall(i int, result1 v2action.Warnings, result2 error) {
	fake.GrantSpaceDeveloperByUsernameStub = nil
	if fake.grantSpaceDeveloperByUsernameReturnsOnCall == nil {
		fake.grantSpaceDeveloperByUsernameReturnsOnCall = make(map[int]struct {
			result1 v2action.Warnings
			result2 error
		})
	}
	fake.grantSpaceDeveloperByUsernameReturnsOnCall[i] = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeCreateSpaceActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createSpaceMutex.RLock()
	defer fake.createSpaceMutex.RUnlock()
	fake.grantSpaceManagerByUsernameMutex.RLock()
	defer fake.grantSpaceManagerByUsernameMutex.RUnlock()
	fake.grantSpaceDeveloperByUsernameMutex.RLock()
	defer fake.grantSpaceDeveloperByUsernameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCreateSpaceActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v6.CreateSpaceActor = new(FakeCreateSpaceActor)
