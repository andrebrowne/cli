// Code generated by counterfeiter. DO NOT EDIT.
package v7fakes

import (
	sync "sync"

	v7pushaction "code.cloudfoundry.org/cli/actor/v7pushaction"
	v7 "code.cloudfoundry.org/cli/command/v7"
)

type FakePushActor struct {
	ActualizeStub        func(v7pushaction.PushState, v7pushaction.ProgressBar) (<-chan v7pushaction.PushState, <-chan v7pushaction.Event, <-chan v7pushaction.Warnings, <-chan error)
	actualizeMutex       sync.RWMutex
	actualizeArgsForCall []struct {
		arg1 v7pushaction.PushState
		arg2 v7pushaction.ProgressBar
	}
	actualizeReturns struct {
		result1 <-chan v7pushaction.PushState
		result2 <-chan v7pushaction.Event
		result3 <-chan v7pushaction.Warnings
		result4 <-chan error
	}
	actualizeReturnsOnCall map[int]struct {
		result1 <-chan v7pushaction.PushState
		result2 <-chan v7pushaction.Event
		result3 <-chan v7pushaction.Warnings
		result4 <-chan error
	}
	ConceptualizeStub        func(string, string, string, string, v7pushaction.FlagOverrides, []byte) ([]v7pushaction.PushState, v7pushaction.Warnings, error)
	conceptualizeMutex       sync.RWMutex
	conceptualizeArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 v7pushaction.FlagOverrides
		arg6 []byte
	}
	conceptualizeReturns struct {
		result1 []v7pushaction.PushState
		result2 v7pushaction.Warnings
		result3 error
	}
	conceptualizeReturnsOnCall map[int]struct {
		result1 []v7pushaction.PushState
		result2 v7pushaction.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePushActor) Actualize(arg1 v7pushaction.PushState, arg2 v7pushaction.ProgressBar) (<-chan v7pushaction.PushState, <-chan v7pushaction.Event, <-chan v7pushaction.Warnings, <-chan error) {
	fake.actualizeMutex.Lock()
	ret, specificReturn := fake.actualizeReturnsOnCall[len(fake.actualizeArgsForCall)]
	fake.actualizeArgsForCall = append(fake.actualizeArgsForCall, struct {
		arg1 v7pushaction.PushState
		arg2 v7pushaction.ProgressBar
	}{arg1, arg2})
	fake.recordInvocation("Actualize", []interface{}{arg1, arg2})
	fake.actualizeMutex.Unlock()
	if fake.ActualizeStub != nil {
		return fake.ActualizeStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4
	}
	fakeReturns := fake.actualizeReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3, fakeReturns.result4
}

func (fake *FakePushActor) ActualizeCallCount() int {
	fake.actualizeMutex.RLock()
	defer fake.actualizeMutex.RUnlock()
	return len(fake.actualizeArgsForCall)
}

func (fake *FakePushActor) ActualizeCalls(stub func(v7pushaction.PushState, v7pushaction.ProgressBar) (<-chan v7pushaction.PushState, <-chan v7pushaction.Event, <-chan v7pushaction.Warnings, <-chan error)) {
	fake.actualizeMutex.Lock()
	defer fake.actualizeMutex.Unlock()
	fake.ActualizeStub = stub
}

func (fake *FakePushActor) ActualizeArgsForCall(i int) (v7pushaction.PushState, v7pushaction.ProgressBar) {
	fake.actualizeMutex.RLock()
	defer fake.actualizeMutex.RUnlock()
	argsForCall := fake.actualizeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePushActor) ActualizeReturns(result1 <-chan v7pushaction.PushState, result2 <-chan v7pushaction.Event, result3 <-chan v7pushaction.Warnings, result4 <-chan error) {
	fake.actualizeMutex.Lock()
	defer fake.actualizeMutex.Unlock()
	fake.ActualizeStub = nil
	fake.actualizeReturns = struct {
		result1 <-chan v7pushaction.PushState
		result2 <-chan v7pushaction.Event
		result3 <-chan v7pushaction.Warnings
		result4 <-chan error
	}{result1, result2, result3, result4}
}

func (fake *FakePushActor) ActualizeReturnsOnCall(i int, result1 <-chan v7pushaction.PushState, result2 <-chan v7pushaction.Event, result3 <-chan v7pushaction.Warnings, result4 <-chan error) {
	fake.actualizeMutex.Lock()
	defer fake.actualizeMutex.Unlock()
	fake.ActualizeStub = nil
	if fake.actualizeReturnsOnCall == nil {
		fake.actualizeReturnsOnCall = make(map[int]struct {
			result1 <-chan v7pushaction.PushState
			result2 <-chan v7pushaction.Event
			result3 <-chan v7pushaction.Warnings
			result4 <-chan error
		})
	}
	fake.actualizeReturnsOnCall[i] = struct {
		result1 <-chan v7pushaction.PushState
		result2 <-chan v7pushaction.Event
		result3 <-chan v7pushaction.Warnings
		result4 <-chan error
	}{result1, result2, result3, result4}
}

func (fake *FakePushActor) Conceptualize(arg1 string, arg2 string, arg3 string, arg4 string, arg5 v7pushaction.FlagOverrides, arg6 []byte) ([]v7pushaction.PushState, v7pushaction.Warnings, error) {
	var arg6Copy []byte
	if arg6 != nil {
		arg6Copy = make([]byte, len(arg6))
		copy(arg6Copy, arg6)
	}
	fake.conceptualizeMutex.Lock()
	ret, specificReturn := fake.conceptualizeReturnsOnCall[len(fake.conceptualizeArgsForCall)]
	fake.conceptualizeArgsForCall = append(fake.conceptualizeArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 v7pushaction.FlagOverrides
		arg6 []byte
	}{arg1, arg2, arg3, arg4, arg5, arg6Copy})
	fake.recordInvocation("Conceptualize", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6Copy})
	fake.conceptualizeMutex.Unlock()
	if fake.ConceptualizeStub != nil {
		return fake.ConceptualizeStub(arg1, arg2, arg3, arg4, arg5, arg6)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.conceptualizeReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakePushActor) ConceptualizeCallCount() int {
	fake.conceptualizeMutex.RLock()
	defer fake.conceptualizeMutex.RUnlock()
	return len(fake.conceptualizeArgsForCall)
}

func (fake *FakePushActor) ConceptualizeCalls(stub func(string, string, string, string, v7pushaction.FlagOverrides, []byte) ([]v7pushaction.PushState, v7pushaction.Warnings, error)) {
	fake.conceptualizeMutex.Lock()
	defer fake.conceptualizeMutex.Unlock()
	fake.ConceptualizeStub = stub
}

func (fake *FakePushActor) ConceptualizeArgsForCall(i int) (string, string, string, string, v7pushaction.FlagOverrides, []byte) {
	fake.conceptualizeMutex.RLock()
	defer fake.conceptualizeMutex.RUnlock()
	argsForCall := fake.conceptualizeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *FakePushActor) ConceptualizeReturns(result1 []v7pushaction.PushState, result2 v7pushaction.Warnings, result3 error) {
	fake.conceptualizeMutex.Lock()
	defer fake.conceptualizeMutex.Unlock()
	fake.ConceptualizeStub = nil
	fake.conceptualizeReturns = struct {
		result1 []v7pushaction.PushState
		result2 v7pushaction.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePushActor) ConceptualizeReturnsOnCall(i int, result1 []v7pushaction.PushState, result2 v7pushaction.Warnings, result3 error) {
	fake.conceptualizeMutex.Lock()
	defer fake.conceptualizeMutex.Unlock()
	fake.ConceptualizeStub = nil
	if fake.conceptualizeReturnsOnCall == nil {
		fake.conceptualizeReturnsOnCall = make(map[int]struct {
			result1 []v7pushaction.PushState
			result2 v7pushaction.Warnings
			result3 error
		})
	}
	fake.conceptualizeReturnsOnCall[i] = struct {
		result1 []v7pushaction.PushState
		result2 v7pushaction.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePushActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.actualizeMutex.RLock()
	defer fake.actualizeMutex.RUnlock()
	fake.conceptualizeMutex.RLock()
	defer fake.conceptualizeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePushActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v7.PushActor = new(FakePushActor)
